import:
    - https://mapzen.com/carto/refill-style/9/refill-style.zip
    - https://mapzen.com/carto/refill-style/9/themes/detail-8.zip
    - https://mapzen.com/carto/refill-style/9/themes/label-2.zip
    - https://mapzen.com/carto/refill-style/9/themes/color-zinc.zip

global:
    sdk_mapzen_api_key: mapzen-BtoKQDi

    black_color:                [0.325,0.340,0.370]
    dark_color:                 [0.287,0.299,0.327]
    mid_color:                  [0.247,0.259,0.279]
    midlight_color:             [0.209,0.217,0.233]
    light_color:                [0.167,0.172,0.183]
    lighter_color:              [0.127,0.129,0.136]
    lightest_color:             [0.106,0.108,0.113]
    ultralight_color:           [0.092,0.095,0.099]
    offwhite_color:             [0.085,0.086,0.088]
    white_color:                [0.076,0.079,0.081]
    transparent:                [0.190,0.197,0.211,0.125]
    route_line:                 [0.000,0.250,0.500]

    ultradark_gray_color:       [0.449,0.449,0.449]
    darkest_gray_color:         [0.400,0.400,0.400]
    darker_gray_color:          [0.374,0.374,0.374]
    dark_gray_color:            [0.338,0.338,0.338]
    mid_gray_color:             [0.300,0.300,0.300]
    gray_color:                 [0.251,0.251,0.251]
    light_gray_color:           [0.200,0.200,0.200]
    lighter_gray_color:         [0.167,0.167,0.167]
    lightest_gray_color:        [0.149,0.149,0.149]
    gray_offwhite_color:        [0.130,0.130,0.130]

    generator_fill:   [0.6,0,0]
    generator_stroke: [0.4,0,0]
    power_area_color: [0.4,0.4,0.4]
    text_color: [0.8,0.8,0.8]
    rtm_color: [0.5,0.5,0.5]

    voltage_missing_color: [0.55,0.55,0.55]
    voltage_unknown_color: [0.33,0.33,0.33]
    hvdc_color: [0.459,1,0.953]
    voltage_colors:
        1000000: [0.816,0.482,0.529]
        800000: [0.533,0.18,0.447]
        765000: [0.776,0.251,0.851]
        750000: [0.776,0.251,0.851]
        735000: [0.839,0.349,0.718]
        660000: [0.839,0.349,0.718]
        525000: [0.337,0.2,0.537]
        500000: [0.337,0.2,0.537]
        450000: [0.337,0.2,0.537]
        440000: [0.631,0.643,0.259]
        420000: [0.631,0.643,0.259]
        400000: [0.631,0.643,0.259]
        380000: [0.796,0.529,0.631]
        360000: [0.796,0.529,0.631]
        350000: [0.796,0.529,0.631]
        345000: [0.761,0.243,0.38]
        330000: [0.761,0.243,0.38]
        315000: [0.761,0.243,0.38]
        300000: [0.761,0.243,0.38]
        287000: [0.91,0.376,0.11]
        275000: [0.91,0.376,0.11]
        240000: [0.945,0.576,0.176]
        230000: [0.945,0.576,0.176]
        225000: [0.945,0.576,0.176]
        220000: [0.804,0.286,0.22]
        187000: [0.804,0.286,0.22]
        170000: [0.804,0.286,0.22]
        161000: [0.098,0.396,0.69]
        154000: [0.098,0.396,0.69]
        150000: [0.098,0.396,0.69]
        144000: [0.098,0.396,0.69]
        138000: [0.098,0.396,0.69]
        132000: [0.098,0.396,0.69]
        130000: [0.098,0.396,0.69]
        125000: [0.482,0.686,0.871]
        120000: [0.482,0.686,0.871]
        115000: [0.482,0.686,0.871]
        113000: [0.482,0.686,0.871]
        110000: [0.482,0.686,0.871]
        100000: [0.482,0.686,0.871]
        90000: [0.482,0.686,0.871]
        77000: [0.482,0.686,0.871]
        72000: [0.306,0.698,0.396]
        70000: [0.306,0.698,0.396]
        69000: [0.306,0.698,0.396]
        66000: [0.306,0.698,0.396]
        65000: [0.306,0.698,0.396]
        63000: [0.306,0.698,0.396]
        60000: [0.506,0.557,0.22]
        55000: [0.506,0.557,0.22]
        50000: [0.506,0.557,0.22]
        46000: [0.506,0.557,0.22]
        35000: [0.494,0.286,0.176]
        34500: [0.494,0.286,0.176]
        33000: [0.494,0.286,0.176]
        22000: [0.494,0.286,0.176]
        20000: [0.494,0.286,0.176]

    ercotgrid: false
    lookup_voltage_color: |
        function(feature, split) {
            var v = feature.voltage_normalized;
            if (!v) return global.voltage_missing_color;

            if (feature.frequency == "0") {
                color = global.hvdc_color;
            } else {
                var color = global.voltage_unknown_color;
                if (split != undefined) v = v.split(';')[split];
                color = global.voltage_colors[v];
            }

            if (global.ercotgrid && feature.grid != 'ercot') {
                color = color.slice();
                color[0] = (color[0]) / 2.0;
                color[1] = (color[1]) / 2.0;
                color[2] = (color[2]) / 2.0;
            }

            return color;
        }

    pretty_print_voltage: |
        function(voltage) {
            var n = parseInt(voltage);
            if (n && n >= 1000) return n / 1000 + ' kV';
            else return voltage;
        }

sources:
    power:
        type: MVT
        max_zoom: 16
        url: https://kreed.org/power/{z}/{x}/{y}.pbf

    ercotrtm:
        type: GeoJSON
        url: ercot_rtm.geojson

styles:
    label:
        base: text
        blend_order: 2
        draw:
            font:
                size: [[9, 8px], [20, 16px]]
                family: global.text_font_family
                weight: normal
                fill: global.text_color
                stroke: { color: global.white_color, width: 3px }

    powerline:
        base: lines
        blend: inlay
        draw:
            width: [[8, 1.5px], [14, 3px]]

    powerline2v0:
        base: lines
        blend: inlay
        dash: [3, 3]
        draw:
            width: [[8, 1.5px], [14, 3px]]

    powerline2v1:
        base: lines
        blend: inlay
        dash: [0, 3, 3, 0]
        draw:
            width: [[8, 1.5px], [14, 3px]]

    powerline3v0:
        base: lines
        blend: inlay
        dash: [3, 6]
        draw:
            width: [[8, 1.5px], [14, 3px]]

    powerline3v1:
        base: lines
        blend: inlay
        dash: [0, 3, 3, 3]
        draw:
            width: [[8, 1.5px], [14, 3px]]

    powerline3v2:
        base: lines
        blend: inlay
        dash: [0, 6, 3, 0]
        draw:
            width: [[8, 1.5px], [14, 3px]]

    powercable:
        base: lines
        blend: inlay
        dash: [3, 1]
        draw:
            width: [[8, 1.5px], [14, 3px]]

    inlay-point:
        base: points
        blend: inlay

layers:
    power-line:
        data: { source: power }

        powerlines:
            filter: { kind: [line, minor_line] }

            powerline0v:
                filter: { voltage_count: 0 }
                draw:
                    powerline:
                        color: global.voltage_missing_color
                        order: 498

            powerline1v:
                filter: { voltage_count: 1 }
                draw:
                    powerline:
                        color: function() { return global.lookup_voltage_color(feature) }
                        order: 500

            powerline2v0:
                filter: { voltage_count: 2 }
                draw:
                    powerline2v0:
                        color: function() { return global.lookup_voltage_color(feature, 0) }
                        order: 500

            powerline2v1:
                filter: { voltage_count: 2 }
                draw:
                    powerline2v1:
                        color: function() { return global.lookup_voltage_color(feature, 1) }
                        order: 499

            powerline3v0:
                filter: { voltage_count: 3 }
                draw:
                    powerline3v0:
                        color: function() { return global.lookup_voltage_color(feature, 0) }
                        order: 500

            powerline3v1:
                filter: { voltage_count: 3 }
                draw:
                    powerline3v1:
                        color: function() { return global.lookup_voltage_color(feature, 1) }
                        order: 499

            powerline3v2:
                filter: { voltage_count: 3 }
                draw:
                    powerline3v2:
                        color: function() { return global.lookup_voltage_color(feature, 2) }
                        order: 499

        powercable:
            filter: { kind: cable }
            draw:
                powercable:
                    color: function() { return global.lookup_voltage_color(feature) }
                    order: 500

        linelabel:
            filter: { voltage: true, $zoom: { min: 10 } }
            draw:
                label:
                    text_source: |
                        function() { return feature.voltage.split(';').map(global.pretty_print_voltage).join('; ') + (feature.cables ? ' (' + feature.cables + ')' : ''); }
                    offset: [0, -8px]

    power-polygon:
        data: { source: power }

        powerarea:
            filter: { kind: [substation, plant] }
            draw:
                lines:
                    color: global.power_area_color
                    width: [[8, 1px], [14, 1.5px]]
                    order: 300

        generator:
            filter: { kind: generator }
            draw:
                polygons:
                    color: global.generator_fill
                    order: 500
                lines:
                    color: global.generator_stroke
                    width: 1.5px
                    order: 400

    power-point:
        data: { source: power }

        generator:
            filter: { kind: generator, label_placement: [false] }
            draw:
                inlay-point:
                    collide: false
                    color: global.generator_fill
                    size: [[6, 0], [7, 0.1], [12, 8]]
                    outline:
                        color: global.generator_stroke
                        width: [[7, 0.1], [12, 1]]
                    order: 400

        substationlabel:
            filter: { kind: substation, label_placement: true, name: true, $zoom: { min: 10 } }
            draw:
                label:
                    buffer: 1px
                    repeat_distance: 0px
                    priority: 25
                    font:
                        transform: uppercase
                    text_source: |
                        function() {
                            var a = [];
                            a.push(feature.name);
                            if (feature.voltage) a.push(feature.voltage.split(';').map(global.pretty_print_voltage).join('; '));
                            return a.join(' ');
                        }

        plantlabel:
            filter: { kind: plant, name: true, label_placement: true }
            draw:
                label:
                    buffer: 1px
                    repeat_distance: 0px
                    priority: 20
                    priority: function() { return -feature.capacity; }
                    font:
                        size: [[9, 11px], [20, 20px]]
                    text_source: |
                        function() {
                            var a = [];
                            a.push(feature.name);
                            if (feature.capacity) a.push((feature.capacity / 1000000.0) + ' MW');
                            if ($zoom >= 9 && feature.fuel) a.push(feature.fuel);
                            return a.join(' ');
                        }

        generatorlabel:
            filter: { kind: generator, $zoom: { min: 12 } }
            draw:
                label:
                    buffer: 1px
                    repeat_distance: 0px
                    priority: 35
                    offset: [0, -12px]
                    text_source: |
                        function() {
                            var a = [];
                            if (feature.name) a.push(feature.name);
                            if (feature.capacity) a.push((feature.capacity / 1000000.0) + ' MW');
                            return a.join(' ');
                        }

    ercotrtm:
        enabled: false
        data: { source: ercotrtm }
        generator:
            filter: { $zoom: { min: 6 } }
            draw:
                points:
                    interactive: true
                    collide: false
                    color: global.rtm_color
                    size: 15
                    order: 700
